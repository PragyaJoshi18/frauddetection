import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the dataset
data = pd.read_csv('creditcard.csv')

# Standardize the 'Amount' feature
scaler = StandardScaler()
data['normAmount'] = scaler.fit_transform(data['Amount'].values.reshape(-1, 1))

# Drop unnecessary columns
data = data.drop(['Time', 'Amount'], axis=1)

# Split the data into train and test sets
X = data.iloc[:, data.columns != 'Class']
y = data.iloc[:, data.columns == 'Class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from imblearn.over_sampling import SMOTE

sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X_train, y_train.values.ravel())

from sklearn.ensemble import RandomForestClassifier

# Initialize the model
rf = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf.fit(X_res, y_res)

from sklearn.metrics import confusion_matrix, classification_report

# Predict on the test data
y_pred = rf.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred))

#model enhancement
from sklearn.linear_model import LogisticRegression

# Initialize the model
lr = LogisticRegression(random_state=42)

# Train the model
lr.fit(X_res, y_res)

# Predict on the test data
y_pred_lr = lr.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred_lr))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred_lr))

